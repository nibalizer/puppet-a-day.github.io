<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Puppet a day</title><link href="http://puppet-a-day.com/" rel="alternate"></link><link href="http://puppet-a-day.com/feeds/blog.atom.xml" rel="self"></link><id>http://puppet-a-day.com/</id><updated>2014-07-19T00:00:00+00:00</updated><entry><title>From shell toÂ Puppet</title><link href="http://puppet-a-day.com/blog/2014/07/19/from-shell-to-puppet/" rel="alternate"></link><updated>2014-07-19T00:00:00+00:00</updated><author><name>Daenney</name></author><id>tag:puppet-a-day.com,2014-07-19:blog/2014/07/19/from-shell-to-puppet/</id><summary type="html">&lt;p&gt;It comes up every now and then in #puppet on &lt;span class="caps"&gt;IRC&lt;/span&gt;. Someone comes in, usually fairly new to Puppet, and pastes the link to a Gist with a manifest they&amp;#8217;re having trouble&amp;nbsp;with.&lt;/p&gt;
&lt;p&gt;When you click on that link and look at it you&amp;#8217;re usually greeted by Puppet code trying to replicate a shell script. Everything is ordered, notify/subscribes aren&amp;#8217;t used and a ton of exec&amp;#8217;s are in place that take care of restarting the managed services every single&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;The problem here is two-fold; people generally don&amp;#8217;t bother to read the documentation or the introductory material and they&amp;#8217;re having a hard time wrapping their head around the concepts of how Puppet &amp;#8216;orders&amp;#8217;&amp;nbsp;things.&lt;/p&gt;
&lt;h2 id="imperative-vs-declarative"&gt;Imperative vs.&amp;nbsp;Declarative&lt;/h2&gt;
&lt;p&gt;Bash, or any form of shell scripting, is considered to be imperative. You type in commands and those commands manipulate the state of the machine. Consider a one-line script with just the following command: &lt;code&gt;apt-get install git&lt;/code&gt;. You give the machine a command to execute and the result of that command is that git is now&amp;nbsp;available.&lt;/p&gt;
&lt;p&gt;When we&amp;#8217;re automating infrastructure you&amp;#8217;ll quickly run into the diversity issue. It&amp;#8217;s probably that at some point in time you&amp;#8217;ll need to make your scripts work with a different platform or package&amp;nbsp;manager.&lt;/p&gt;
&lt;p&gt;Puppet takes a different approach. Instead of telling Puppet that we want to run &lt;code&gt;apt-get install git&lt;/code&gt; we tell Puppet &lt;code&gt;make sure git is installed once you're done&lt;/code&gt;. At this point, we&amp;#8217;re declaring (hence the declarative nature) what state we want the machine in, not &lt;em&gt;how&lt;/em&gt; to achieve that&amp;nbsp;state.&lt;/p&gt;
&lt;p&gt;In Puppet instead we would&amp;nbsp;say:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;git&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;ensure&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;installed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How to install &lt;code&gt;git&lt;/code&gt; on the different platforms this might run on is an implementation detail left for Puppet to figure out. If you&amp;#8217;re curious as to how this is done start looking at Types and&amp;nbsp;Providers.&lt;/p&gt;
&lt;h2 id="linear-vs-planartreegraph"&gt;Linear vs&amp;nbsp;planar/tree/graph&lt;/h2&gt;
&lt;p&gt;In a Bash script, things execute in the precise order you&amp;#8217;ve told them to. Write the line &lt;code&gt;apt-get update&lt;/code&gt; before &lt;code&gt;apt-get install git&lt;/code&gt; and you can rest assured that one command will execute before the next. There&amp;#8217;s also a downside to this, do we still want to try and run &lt;code&gt;apt-get install git&lt;/code&gt; if &lt;code&gt;apt-get update&lt;/code&gt; fails?&lt;/p&gt;
&lt;p&gt;Now if we consider the following snippet in the Puppet &lt;span class="caps"&gt;DSL&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;exec&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;apt-get update&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;git&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;ensure&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;installed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This does not mean that &lt;code&gt;apt-get update&lt;/code&gt; will be run before the package &lt;code&gt;git&lt;/code&gt; is to be installed. It only tells Puppet that, before it&amp;#8217;s done, it needs to run &lt;code&gt;apt-get update&lt;/code&gt; and install &lt;code&gt;git&lt;/code&gt;, but not necessarily in that&amp;nbsp;order.&lt;/p&gt;
&lt;p&gt;Though at first you&amp;#8217;ll find this startling and confusing it&amp;#8217;s one of the things that make Puppet so powerful. Internally Puppet constructs a graph of all the relations between resources and ensures that based on those resources things are executed in the right order. If you don&amp;#8217;t specify an order you won&amp;#8217;t know when something will happen but you&amp;#8217;re guaranteed it will be done before Puppet is done&amp;nbsp;executing.&lt;/p&gt;
&lt;p&gt;The reason this is so great is simply: you often don&amp;#8217;t need things to happen in a particular order. Does it matter if Git is installed before Mercurial or vim before emacs? As long as they end up being installed, when in a run that happens is mostly&amp;nbsp;irrelevant.&lt;/p&gt;
&lt;p&gt;However, there are plenty of cases where order matters. You can&amp;#8217;t start a web server without it being installed first just like you should take care of running &lt;code&gt;apt-get update&lt;/code&gt; before trying to install a package if your apt configuration has&amp;nbsp;changed.&lt;/p&gt;
&lt;h2 id="beforeafter-notifysubscribe"&gt;Before/after,&amp;nbsp;notify/subscribe&lt;/h2&gt;
&lt;p&gt;We have two types of relations in Puppet. The first pair, before and after, only make sure that things are run in a specific order. Notify and subscribe are a bit more interesting: they imply a before/after relationship but on top of that tell Puppet something else. If resource &amp;#8216;a&amp;#8217; is changed, we call this refreshing in Puppet-speak, then resource &amp;#8216;b&amp;#8217; needs to be refreshed&amp;nbsp;too.&lt;/p&gt;
&lt;p&gt;Our first&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;apache2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;ensure&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;latest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;before&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;apache2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;service&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;apache2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;ensure&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;running&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now what we&amp;#8217;re telling Puppet&amp;nbsp;is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We want Apache installed and whenever you run check that it is the latest available version is installed (this will cause Puppet to upgrade Apache for&amp;nbsp;you);&lt;/li&gt;
&lt;li&gt;Make sure we&amp;#8217;re installed before you try to manage the apache&amp;nbsp;service;&lt;/li&gt;
&lt;li&gt;Manage the apache service and ensure that it is running (this will start the daemon if it is not&amp;nbsp;running).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following snippet achieves the exact same&amp;nbsp;thing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;apache2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;ensure&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;latest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;service&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;apache2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;ensure&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;running&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;after&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;Package&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;apache2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is telling&amp;nbsp;Puppet&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We want Apache installed and whenever you run check that it is the latest available version is installed (this will cause Puppet to upgrade Apache for&amp;nbsp;you);&lt;/li&gt;
&lt;li&gt;Manage the apache service and ensure that it is running (this will start the daemon if it is not&amp;nbsp;running);&lt;/li&gt;
&lt;li&gt;We can only manage the apache service after the package apache is&amp;nbsp;installed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, consider what happens when the &amp;#8216;apache2&amp;#8217; package gets updated. Though the package is updated Puppet has no way to know this has happened so it can&amp;#8217;t restart the apache service for us in order to ensure we&amp;#8217;re running our newly patched&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;Propagating this need to &amp;#8216;refresh&amp;#8217; based on the fact that another resource &amp;#8216;refreshed&amp;#8217; is done by&amp;nbsp;notify/subscribe.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;apache2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;ensure&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;latest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;notify&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;apache2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;service&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;apache2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;ensure&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;running&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you might have guessed, we&amp;#8217;re now not only telling Puppet that the package apache2 needs to be installed before we can manage the apache2 service but we&amp;#8217;re also telling Puppet that we should inform the apache2 service if the state of the package resource changes. This in turn will allow Puppet to restart the apache2&amp;nbsp;service.&lt;/p&gt;
&lt;p&gt;Subscribe is to notify what after is to before, so you can remove the &lt;code&gt;notify&lt;/code&gt; from the package and add a &lt;code&gt;subscribe&lt;/code&gt; to the service for the&amp;nbsp;package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;apache2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;ensure&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;latest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;service&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;apache2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;ensure&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;running&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="k"&gt;subscribe&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;apache2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All this has an added bonus, if the package apache2 fails to install Puppet will not try to start the apache2 service because it is aware that something went wrong with one of the resources it depends&amp;nbsp;on.&lt;/p&gt;
&lt;h2 id="relationships-are-hard"&gt;Relationships are&amp;nbsp;hard&lt;/h2&gt;
&lt;p&gt;It will probably take you a while to get your head around relationships in Puppet, when you need them and when you&amp;nbsp;don&amp;#8217;t.&lt;/p&gt;
&lt;p&gt;The thing to ask yourself is: &amp;#8220;Do I care when this happens?&amp;#8221; Quite often you&amp;#8217;ll find out that the answer is &amp;#8220;no, as long as it happens&amp;#8221; in which case Puppet will do the right thing for you by&amp;nbsp;default.&lt;/p&gt;
&lt;p&gt;If you do care when this happens, think carefully on the type of relationship you need. &amp;#8220;Do I just need things to execute in a specific order or do I need these parts to be aware of changes to one another?&amp;#8221; and chose a before/after or notify/subscribe relation&amp;nbsp;accordingly.&lt;/p&gt;
&lt;p&gt;One last thing to remember, when you notify from a to b you do not need to subscribe from b to a and the same thing applies to&amp;nbsp;before/after.&lt;/p&gt;</summary></entry><entry><title>PuppetÂ caching</title><link href="http://puppet-a-day.com/blog/2014/05/20/puppet-caching/" rel="alternate"></link><updated>2014-05-20T00:00:00+00:00</updated><author><name>Daenney</name></author><id>tag:puppet-a-day.com,2014-05-20:blog/2014/05/20/puppet-caching/</id><summary type="html">&lt;p&gt;With Puppet 3.6 out the door and the new caching mechanisms it provides I
started exploring how to do caching with Puppet. A thank you goes out to
&lt;a href="https://github.com/kbarber" title="Github - Ken Barber"&gt;Ken Barber&lt;/a&gt; of &lt;a href="http://www.puppetlabs.com" title="Puppet Labs"&gt;Puppet Labs&lt;/a&gt; and &lt;a href="https://github.com/dalen" title="Github - Erik DalÃ©n"&gt;Erik DalÃ©n&lt;/a&gt; of
&lt;a href="http://www.spotify.com" title="Spotify"&gt;Spotify&lt;/a&gt; for their help on this&amp;nbsp;quest.&lt;/p&gt;
&lt;p&gt;The first thing I wanted to do is use the new caching mechanism for directory
based environments on Puppet 3.6 in such a way that our production environment
would be cached forever. Of course we also need a way to invalidate that cache
when we deploy but between two deploys this code never ever&amp;nbsp;changes.&lt;/p&gt;
&lt;h2 id="directory-based-environments-cache"&gt;Directory-based environments&amp;nbsp;cache&lt;/h2&gt;
&lt;p&gt;First order of business, turn on caching in &lt;code&gt;/etc/puppet/puppet.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;environment_timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;unlimited&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Restart the Puppet master and there you go. All the &lt;code&gt;*.pp&lt;/code&gt; files are now parsed
once (instead of being reparsed every 5s or so). Problem is, how do we
invalidate this&amp;nbsp;cache?&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re running the &amp;#8216;community&amp;#8217; stack all it takes is to tell Passenger to
reload. This can be done by simply touching the &lt;code&gt;tmp/restart.txt&lt;/code&gt; file that
Passenger looks for. On the next request it receives, Passenger will reload and
the Puppet Master will now reparse the &lt;code&gt;*.pp&lt;/code&gt; files for the&amp;nbsp;environment.&lt;/p&gt;
&lt;p&gt;The location of the &lt;code&gt;tmp/&lt;/code&gt; directory varies but it&amp;#8217;s right next to where the
&lt;code&gt;config.ru&lt;/code&gt; file is&amp;nbsp;located:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;.
âââ config.ru
âââ public
âââ tmp
    âââ restart.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is no need to remove the &lt;code&gt;restart.txt&lt;/code&gt; file, Passenger looks at the
timestamp when a request comes in and makes the right&amp;nbsp;decision.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re deploying with Capistrano you can override the &lt;code&gt;finalize_update&lt;/code&gt; task
and add something like this in&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:finalize_update&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;try_sudo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; touch /usr/share/puppet/ext/rack/tmp/restart.txt&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="nginx-cache"&gt;Nginx&amp;nbsp;cache&lt;/h2&gt;
&lt;p&gt;The second thing I wanted to do is cache a few more things at the nginx level.
If you drill down a bit into Puppet you&amp;#8217;ll notice that one of the things the
agent does frequently is request things from the following&amp;nbsp;endpoints:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/$environment/file_metadata&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/$environment/file_metadatas&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/$environment/file_content&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These endpoints are computationally expensive; &lt;code&gt;file_metadata&lt;/code&gt; for example ends
up running &lt;code&gt;md5sum&lt;/code&gt; over every file that is being transferred and
&lt;code&gt;file_metadatas&lt;/code&gt; does the same but in bulk for the plugins that are being&amp;nbsp;synced.&lt;/p&gt;
&lt;p&gt;As you can imagine, &lt;code&gt;md5sum&lt;/code&gt; over all these files constantly is slow and also
pretty useless as we just stated that these files don&amp;#8217;t change except for when
we deploy. Prime candidate for some fancy&amp;nbsp;caching!&lt;/p&gt;
&lt;p&gt;The first thing to do is configure the cache space itself in nginx. This &lt;em&gt;must&lt;/em&gt;
be done in the &lt;a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_path" title="NGINX - proxy_cache_path"&gt;&lt;code&gt;http&lt;/code&gt;&lt;/a&gt;&amp;nbsp;block.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;proxy_cache_path&lt;/span&gt; &lt;span class="s"&gt;/var/cache/nginx&lt;/span&gt; &lt;span class="s"&gt;levels=1&lt;/span&gt; &lt;span class="s"&gt;keys_zone=puppetmaster:10m&lt;/span&gt; &lt;span class="s"&gt;max_size=500m&lt;/span&gt; &lt;span class="s"&gt;inactive=60m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;proxy_temp_path&lt;/span&gt; &lt;span class="s"&gt;/var/cache/tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What we&amp;#8217;ve configured here is a cache space who&amp;#8217;s files will live in
&lt;code&gt;/var/cache/nginx&lt;/code&gt;, have a directory structure of 1 level/folder deep, a
&lt;code&gt;key_zone&lt;/code&gt; size of 10 megabytes, allowed to grow to 500 megabytes of disk space
and entries will be removed after 60 minutes if not being&amp;nbsp;hit.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;proxy_temp_path&lt;/code&gt; is a filesystem location where temporary files that nginx
creates for its own purposes will live. It&amp;#8217;s a good idea for these directories
to be on the &lt;em&gt;same&lt;/em&gt;&amp;nbsp;filesystem.&lt;/p&gt;
&lt;p&gt;Up next, configuring the actual cache for the&amp;nbsp;proxy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;^/production/file_(metadatas?|content)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_redirect&lt;/span&gt;             &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_cache&lt;/span&gt;                &lt;span class="s"&gt;puppetmaster&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_cache_valid&lt;/span&gt;          &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="mi"&gt;302&lt;/span&gt; &lt;span class="mi"&gt;15m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_cache_valid&lt;/span&gt;          &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="mi"&gt;1m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass&lt;/span&gt;                 &lt;span class="s"&gt;http://puppetmaster&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This block tells nginx to match certain paths in the request and proxy those to
the Puppet Master but by using the cache. A backend response of &lt;code&gt;200&lt;/code&gt; or &lt;code&gt;302&lt;/code&gt;
is cached for 15 minutes, a &lt;code&gt;404&lt;/code&gt; is cached for&amp;nbsp;1m.&lt;/p&gt;
&lt;p&gt;Notice that we&amp;#8217;re only matching &lt;code&gt;/production&lt;/code&gt;, the production environment and
not any other. This is done on purpose, the other environments are usually for
testing that map to a feature-branch in git. We usually have no need to cache
these as they are&amp;nbsp;short-lived.&lt;/p&gt;
&lt;p&gt;A somewhat complete configuration looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;puppetmaster&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="s"&gt;unix:/path/to/passenger/puppetmaster/socket/file.sock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt;              &lt;span class="mi"&gt;8140&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;root&lt;/span&gt;                &lt;span class="s"&gt;/usr/share/puppet/ext/rack&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_certificate&lt;/span&gt;     &lt;span class="s"&gt;/var/lib/puppet/ssl/certs/&lt;/span&gt;&lt;span class="nv"&gt;$FQDN.pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_certificate_key&lt;/span&gt; &lt;span class="s"&gt;/var/lib/puppet/ssl/private_keys/&lt;/span&gt;&lt;span class="nv"&gt;$FQDN.pem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;ssl_verify_client&lt;/span&gt;   &lt;span class="s"&gt;optional&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# All HTTP API requests, requiring a valid certificate&lt;/span&gt;
    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ssl_client_verify&lt;/span&gt; &lt;span class="s"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;SUCCESS)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kn"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt;  &lt;span class="s"&gt;X-Client-Verify&lt;/span&gt;  &lt;span class="nv"&gt;$ssl_client_verify&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt;  &lt;span class="s"&gt;X-Client-DN&lt;/span&gt;      &lt;span class="nv"&gt;$ssl_client_s_dn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt;  &lt;span class="s"&gt;X-SSL-Subject&lt;/span&gt;    &lt;span class="nv"&gt;$ssl_client_s_dn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt;  &lt;span class="s"&gt;X-SSL-Issuer&lt;/span&gt;     &lt;span class="nv"&gt;$ssl_client_i_dn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_redirect&lt;/span&gt;    &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass&lt;/span&gt;        &lt;span class="s"&gt;http://puppetmaster&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="c1"&gt;# Requests for cached endpoints, requiring a valid certificate&lt;/span&gt;
    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;^/production/file_(metadatas?|content)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$ssl_client_verify&lt;/span&gt; &lt;span class="s"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;SUCCESS)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kn"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kn"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_cache_valid&lt;/span&gt;  &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="mi"&gt;302&lt;/span&gt; &lt;span class="mi"&gt;15m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_cache_valid&lt;/span&gt;  &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="mi"&gt;1m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass&lt;/span&gt;         &lt;span class="s"&gt;http://puppetmaster&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt;   &lt;span class="s"&gt;X-Client-Verify&lt;/span&gt;  &lt;span class="nv"&gt;$ssl_client_verify&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt;   &lt;span class="s"&gt;X-Client-DN&lt;/span&gt;      &lt;span class="nv"&gt;$ssl_client_s_dn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt;   &lt;span class="s"&gt;X-SSL-Subject&lt;/span&gt;    &lt;span class="nv"&gt;$ssl_client_s_dn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt;   &lt;span class="s"&gt;X-SSL-Issuer&lt;/span&gt;     &lt;span class="nv"&gt;$ssl_client_i_dn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_redirect&lt;/span&gt;     &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_cache&lt;/span&gt;        &lt;span class="s"&gt;puppetmaster&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# Requests for /certificate, used before a valid certificate&lt;/span&gt;
    &lt;span class="c1"&gt;# has been recieved, therefor not requiring $ssl_client_verify&lt;/span&gt;
    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/certificate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_redirect&lt;/span&gt;    &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass&lt;/span&gt;        &lt;span class="s"&gt;http://puppetmaster&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Reload your nginx configuration and enjoy. Keep in mind that this cache will
not speed up agent run times but will mostly decrease load on your&amp;nbsp;masters.&lt;/p&gt;
&lt;p&gt;We are left with one problem though; how do we invalidate this cache at deploy
time? Throwing away the cache is pretty easy, just remove all files in
&lt;code&gt;/var/cache/nginx&lt;/code&gt; and you&amp;#8217;re done. Trouble is, you probably don&amp;#8217;t have the
permissions to do so and you probably don&amp;#8217;t want to be &lt;code&gt;sudo&lt;/code&gt;ing during your
deploy to do&amp;nbsp;so.&lt;/p&gt;
&lt;p&gt;Enter mod_lua for nginx. This allows us to create an endpoint on the Puppet
Master vhost that we can hit, simply with cURL, which will take care of
throwing away the cache. Beware that this is a hack, albeit an awesome&amp;nbsp;one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/cache_purge&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;limit_except&lt;/span&gt; &lt;span class="s"&gt;POST&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;allow&lt;/span&gt; &lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="s"&gt;.0.0.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;allow&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;deny&lt;/span&gt; &lt;span class="s"&gt;all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kn"&gt;content_by_lua&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
        &lt;span class="s"&gt;os.execute(&amp;quot;find&lt;/span&gt; &lt;span class="s"&gt;/var/cache/nginx&lt;/span&gt; &lt;span class="s"&gt;-type&lt;/span&gt; &lt;span class="s"&gt;f&lt;/span&gt; &lt;span class="s"&gt;-delete&amp;quot;)&lt;/span&gt;
        &lt;span class="s"&gt;ngx.status&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;204&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I&amp;#8217;m sure you can guess what this does. You can now post to &lt;code&gt;/cache_purge&lt;/code&gt; which
in turn, by using the power of Lua, executes the necessary command to clear up
the&amp;nbsp;cache.&lt;/p&gt;
&lt;p&gt;Going back to the Capistrano example earlier you can now add this&amp;nbsp;too:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:finalize_update&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;try_sudo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; touch /usr/share/puppet/ext/rack/tmp/restart.txt&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;curl --silent -k -X POST https://localhost:8140/cache_purge&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I personally frown on the &lt;code&gt;-k&lt;/code&gt; in the cURL command here so I suggest you
alter it to include &lt;code&gt;--cacert&lt;/code&gt; and point that to
&lt;code&gt;/var/lib/puppet/ssl/certs/ca.pem&lt;/code&gt; instead.&lt;/p&gt;
&lt;h2 id="apache-cache"&gt;Apache&amp;nbsp;cache&lt;/h2&gt;
&lt;p&gt;The cache configuration for nginx is inspired based on what &lt;a href="https://github.com/dalen" title="Github - Erik DalÃ©n"&gt;Erik DalÃ©n&lt;/a&gt;
has been doing at Spotify and decided to&amp;nbsp;share:&lt;/p&gt;
&lt;script src="https://gist.github.com/dalen/6672186.js"&gt;&lt;/script&gt;

&lt;p&gt;Note that this configuration is not caching the &lt;code&gt;file_metadatas&lt;/code&gt; endpoint, I
suggest you do. It also expires the cache after 300 seconds, 5m, and can grow
up to &lt;span class="caps"&gt;1GB&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m familiar enough with Apache to be able to tell you that this stores the
cache in &lt;span class="caps"&gt;RAM&lt;/span&gt; but I have no idea how to invalidate it at deploy&amp;nbsp;time.&lt;/p&gt;</summary></entry><entry><title>Purging ssh_authorized_keys withÂ Puppet</title><link href="http://puppet-a-day.com/blog/2014/05/20/purging-ssh_authorized_keys-with-puppet/" rel="alternate"></link><updated>2014-05-20T00:00:00+00:00</updated><author><name>blkperl</name></author><id>tag:puppet-a-day.com,2014-05-20:blog/2014/05/20/purging-ssh_authorized_keys-with-puppet/</id><summary type="html">&lt;p&gt;Purging &lt;span class="caps"&gt;SSH&lt;/span&gt; authorized keys used to be the number one top-voted
&lt;a href="https://tickets.puppetlabs.com/browse/PUP-1174"&gt;ticket&lt;/a&gt; in the Puppet issue tracker. A community member
&lt;a href="https://github.com/ffrank"&gt;Felix Frank&lt;/a&gt; has solved the issue by adding a purge_ssh_keys parameter
to the User resource. The change was &lt;a href="https://github.com/puppetlabs/puppet/pull/2247"&gt;merged&lt;/a&gt; into the master branch in March
2014 and was &lt;a href="https://docs.puppetlabs.com/puppet/latest/reference/release_notes.html#feature-purging-unmanaged-ssh-authorized-keys"&gt;released&lt;/a&gt; in Puppet 3.6.0 and with some additional &lt;a href="https://docs.puppetlabs.com/puppet/latest/reference/release_notes.html#fixes-to-purgesshkeys"&gt;bug fixes&lt;/a&gt; in
Puppet&amp;nbsp;3.6.2.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s take at the look at the code to enable this feature. Here we have a user
resource for the root user. All we need to do is set the purge_ssh_keys
attribute to true and Puppet will begin removing unmanaged&amp;nbsp;keys.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="k"&gt;user&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="na"&gt;ensure&lt;/span&gt;         &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;present&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;home&lt;/span&gt;           &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;uid&lt;/span&gt;            &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;purge_ssh_keys&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before you enable this you will want to make sure that you have all your root
ssh_authorized_key resources defined in your Puppet manifests. In our example,
we have one ssh_authorized_key resource for our public root bastion key. In
following best practices the key data is populated from a Hiera&amp;nbsp;lookup.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="k"&gt;ssh_authorized_key&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;root@bastion&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;ensure&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;present&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="k"&gt;user&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;   &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ssh-rsa&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;key&lt;/span&gt;    &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="na"&gt;hiera&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;bastion_pub_key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now when we run Puppet on our clients we can see unmanaged keys getting&amp;nbsp;removed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;/Stage&lt;span class="o"&gt;[&lt;/span&gt;main&lt;span class="o"&gt;]&lt;/span&gt;/site::Sysadmin/Ssh_authorized_key&lt;span class="o"&gt;[&lt;/span&gt;root@old_bastion1&lt;span class="o"&gt;]&lt;/span&gt;/ensure&lt;span class="o"&gt;)&lt;/span&gt; removed
&lt;span class="o"&gt;(&lt;/span&gt;/Stage&lt;span class="o"&gt;[&lt;/span&gt;main&lt;span class="o"&gt;]&lt;/span&gt;/site::Sysadmin/Ssh_authorized_key&lt;span class="o"&gt;[&lt;/span&gt;root@old_bastion2&lt;span class="o"&gt;]&lt;/span&gt;/ensure&lt;span class="o"&gt;)&lt;/span&gt; removed
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should check /root/.ssh/authorized_keys afterwards to make sure the
correct keys are in the file. If it looks good you can push the change 
out to all of your&amp;nbsp;machines.&lt;/p&gt;
&lt;p&gt;If your not yet using Puppet 3.6.2 or higher you can use the &lt;a href="https://forge.puppetlabs.com/nightfly/ssh_keys"&gt;ssh_keys&lt;/a&gt;
Puppet module written by &lt;a href="https://github.com/nightfly19"&gt;nightfly&lt;/a&gt; which works around the issue by implementing a new resource
with the concat module for a&amp;nbsp;backend.&lt;/p&gt;
&lt;p&gt;Now you are all set to go deploy this in your&amp;nbsp;infrastructure. &lt;/p&gt;
&lt;p&gt;Happy&amp;nbsp;puppeting!&lt;/p&gt;</summary></entry><entry><title>Contributing toÂ modules</title><link href="http://puppet-a-day.com/blog/2014/04/23/contributing-to-modules/" rel="alternate"></link><updated>2014-04-23T00:00:00+00:00</updated><author><name>Daenney</name></author><id>tag:puppet-a-day.com,2014-04-23:blog/2014/04/23/contributing-to-modules/</id><summary type="html">&lt;p&gt;As one of the &amp;#8216;maintainers&amp;#8217; of &lt;a href="https://github.com/puppetlabs/puppetlabs-apt"&gt;puppetlabs-apt&lt;/a&gt;
I get pull requests in my inbox on a weekly basis implementing some kind of
feature. This is really cool. It means people found bugs, fixed them or
implemented new ones (features that is, we&amp;nbsp;hope).&lt;/p&gt;
&lt;p&gt;But&amp;#8230; modules have tests and when you submit a &lt;span class="caps"&gt;PR&lt;/span&gt; without tests, the only
thing we will do is &lt;em&gt;ask for tests&lt;/em&gt;. We won&amp;#8217;t make an exception for you. If you
want your &lt;span class="caps"&gt;PR&lt;/span&gt; merged, it&amp;#8217;ll need to be up to&amp;nbsp;par.&lt;/p&gt;
&lt;p&gt;This&amp;nbsp;means:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It doesn&amp;#8217;t break current tests (yes this happens,&amp;nbsp;often);&lt;/li&gt;
&lt;li&gt;It introduces tests for the new/fixed behaviour (so we don&amp;#8217;t&amp;nbsp;regress).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We need to write and maintain modules that work for everyone and don&amp;#8217;t
accidentally break on people reaping havoc across their&amp;nbsp;machines.&lt;/p&gt;
&lt;p&gt;So what kind of tests do we expect? At the very least the acceptance tests
should be updated. Those spin up actual machines through Beaker and apply
(parts) of the module to machines and check its behaviour. If you can, or if
your change contains complex logic we&amp;#8217;d also appreciate updated rspec tests,
but those are&amp;nbsp;optional.&lt;/p&gt;
&lt;p&gt;In the end, the golden rules for contributing (to any opensource project really)&amp;nbsp;are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Submit &lt;span class="caps"&gt;PR&lt;/span&gt;&amp;#8217;s with tests. If you don&amp;#8217;t know how to write tests, put that in
   the &lt;span class="caps"&gt;PR&lt;/span&gt; too, so we know how to help&amp;nbsp;you;&lt;/li&gt;
&lt;li&gt;Work with us and we&amp;#8217;ll work with you. It&amp;#8217;s okay if you &lt;span class="caps"&gt;PR&lt;/span&gt; is not perfect or
   if you&amp;#8217;re unfamiliar with writing tests. As long as you&amp;#8217;re willing to put in
   the work we&amp;#8217;re willing to coach you. Perhaps you can have a look at this
   &lt;a href="http://puppet-a-day.com/blog/2014/04/22/modern-testing-of-modules/"&gt;post&lt;/a&gt; to
   get you&amp;nbsp;going;&lt;/li&gt;
&lt;li&gt;Don&amp;#8217;t ride off into the sunset. If you submit a &lt;span class="caps"&gt;PR&lt;/span&gt; we expect you to stick
   around for the follow-ups. If not then it&amp;#8217;ll simply not get merged. Not
   because we&amp;#8217;re mean, but because we too have a thousand other things to do&amp;nbsp;too.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&amp;#8217;re contributing to a Puppetlabs module and you feel your &lt;span class="caps"&gt;PR&lt;/span&gt; isn&amp;#8217;t
getting the attention it deserves, stop by for the weekly Module Triage
hangout on Thursdays around 10 &lt;span class="caps"&gt;AM&lt;/span&gt; Portland Time. Links are posted in
the #puppet-dev on &lt;span class="caps"&gt;IRC&lt;/span&gt; and on the Puppet Developers mailing list&amp;nbsp;beforehand.&lt;/p&gt;</summary></entry><entry><title>Modern testing ofÂ modules</title><link href="http://puppet-a-day.com/blog/2014/04/22/modern-testing-of-modules/" rel="alternate"></link><updated>2014-04-22T00:00:00+00:00</updated><author><name>Ashley Penney</name></author><id>tag:puppet-a-day.com,2014-04-22:blog/2014/04/22/modern-testing-of-modules/</id><summary type="html">&lt;p&gt;At Puppet Labs, we&amp;#8217;ve been busy over the last few months, working on overhauling our
public modules to treat them as distinct pieces of software rather than less tested&amp;nbsp;one-offs.&lt;/p&gt;
&lt;p&gt;A huge part of the overhaul has centered on testing the modules properly, and today
I want to give a quick overview to the current, state of the art testing available for&amp;nbsp;modules.&lt;/p&gt;
&lt;h2 id="rspec-puppet"&gt;rspec-puppet&lt;/h2&gt;
&lt;p&gt;Rspec-puppet has been around for a long time now.  Until recently, it was the
only testing choice out there and was used fairly heavily for Puppet Labs
modules.  Written by Tim Sharpe, rspec-puppet allows you to build catalogs in
rspec and then verify that various resources appear, along with what their properties
may be.  For a very simple example of this we can look at the ntp&amp;nbsp;module.&lt;/p&gt;
&lt;p&gt;In ntp, we start with a describe block, which is a standard part of
&lt;a href="http://rspec.info/"&gt;rspec&lt;/a&gt; and acts as a kind of container for all the stuff
relating to specific tests.  We give it the name of the class we&amp;#8217;re testing.
We then create more describe blocks to allow us to explain very specifically
what we&amp;#8217;re going to be&amp;nbsp;testing.&lt;/p&gt;
&lt;p&gt;After that, we use &lt;code&gt;let&lt;/code&gt; to create a params variable, which contains the
parameters we&amp;#8217;re passing into the ntp class.  We have to declare this as a
hash of&amp;nbsp;parameters.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ntp&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;keys for osfamily &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;system&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;when enabled&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="ss"&gt;:keys_enable&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="ss"&gt;:keys_file&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/etc/ntp/ntp.keys&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="ss"&gt;:keys_trusted&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="ss"&gt;:keys_controlkey&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="ss"&gt;:keys_requestkey&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, we create several &lt;code&gt;it&lt;/code&gt; blocks, which contain the actual tests.  Here
we&amp;#8217;re stating that it should contain a &lt;code&gt;file{}&lt;/code&gt; resource with the title of
&lt;code&gt;/etc/ntp&lt;/code&gt;, and that that it should have various properties.  For the content
checks, we use a regular expression to look within the rendered template
for&amp;nbsp;ntp.conf.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;      &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;contain_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/etc/ntp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;ensure&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;directory&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;contain_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/etc/ntp.conf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="sr"&gt;/trustedkey 1 2 3/&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;contain_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/etc/ntp.conf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="sr"&gt;/controlkey 2/&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;contain_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/etc/ntp.conf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="sr"&gt;/requestkey 3/&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, we do the reverse, and check that when disabled it doesn&amp;#8217;t contain
the content you get when you enable &lt;code&gt;keys_enable&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;when disabled&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="ss"&gt;:keys_enable&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="ss"&gt;:keys_file&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/etc/ntp/ntp.keys&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="ss"&gt;:keys_trusted&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="ss"&gt;:keys_controlkey&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="ss"&gt;:keys_requestkey&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should_not&lt;/span&gt; &lt;span class="n"&gt;contain_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/etc/ntp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;ensure&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;directory&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should_not&lt;/span&gt; &lt;span class="n"&gt;contain_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/etc/ntp.conf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="sr"&gt;/trustedkey 1 2 3/&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should_not&lt;/span&gt; &lt;span class="n"&gt;contain_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/etc/ntp.conf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="sr"&gt;/controlkey 2/&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should_not&lt;/span&gt; &lt;span class="n"&gt;contain_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/etc/ntp.conf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="sr"&gt;/requestkey 3/&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There&amp;#8217;s a ton more information to be found at the &lt;a href="http://rspec-puppet.com/"&gt;rspec-puppet
website&lt;/a&gt;, including a full list of all the available
&amp;#8220;matchers&amp;#8221; (things you can&amp;nbsp;test).&lt;/p&gt;
&lt;h2 id="beaker-and-beaker-rspec"&gt;Beaker and&amp;nbsp;beaker-rspec&lt;/h2&gt;
&lt;p&gt;The previous kind of unit testing is a great way to do quick, lightweight,
testing of your module.  It lets you quickly see if you&amp;#8217;ve renamed a resource
that breaks another class, or you&amp;#8217;ve accidently changed the logic of a class in
such a way that it adds content when you don&amp;#8217;t want it to.  However, it&amp;#8217;s just
testing the contents of the catalog, what it can&amp;#8217;t do is test what actually
happens on a real live&amp;nbsp;server.&lt;/p&gt;
&lt;p&gt;That kind of testing is generally called acceptance testing, and
&lt;a href="https://github.com/puppetlabs/beaker"&gt;Beaker&lt;/a&gt; is our internal framework for
this kind of testing.  It&amp;#8217;s a little rough and ready around the edges in terms
of documentation, because it was only used internally until the module team
started adopting it for modules and spreading the good word about how powerful
this kind of testing can&amp;nbsp;be.&lt;/p&gt;
&lt;p&gt;Beaker is a framework to automatically create and manage virtual machines on
various hypervisors, then apply numerous rspec tests against those virtual
machines, then delete and destroy the machines as&amp;nbsp;required.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;re working on better documentation, as well as long guides designed to take
you from a blank module to a completely tested module, but in the meantime I
hope this blog post can be enough inspiration to help you get started without
those other kinds of&amp;nbsp;documentation!&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ll take a hypothetical module, puppet-ssh, and add Beaker testing to it.  We
start with creating the &amp;#8216;spec_helper_acceptance.rb&amp;#8217; file in the specs
directory. This is a central place to put setup information for Beaker,
generally things like code to install Puppet or&amp;nbsp;modules.&lt;/p&gt;
&lt;p&gt;First we add beaker to our Gemfile.  If we don&amp;#8217;t have one of those just cut
and paste the below into a file called Gemfile in the root of your&amp;nbsp;module.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://rubygems.org&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;beaker-rspec&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And if we&amp;#8217;re &lt;a href="http://bundler.io/"&gt;bundler&lt;/a&gt; users (and we&amp;#8217;re all bundler
users here, right?) we just run bundle install to get all the dependencies
needed for&amp;nbsp;beaker-rspec.&lt;/p&gt;
&lt;p&gt;Once this is done we need to create some framework for Beaker.  We&amp;#8217;ll start
by creating a very simple &amp;#8220;nodeset&amp;#8221;, a yaml file that lists out a virtual
machine to test against.  We&amp;#8217;ll put this in&amp;nbsp;spec/acceptance/nodesets/default.yml.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;HOSTS&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;centos&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x64&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;roles&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
    &lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;
    &lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;centos&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vbox436&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nocm&lt;/span&gt;
    &lt;span class="n"&gt;box_url&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;puppet&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vagrant&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;boxes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;puppetlabs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;centos&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;virtualbox&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nocm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;box&lt;/span&gt;
    &lt;span class="n"&gt;hypervisor&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vagrant&lt;/span&gt;
&lt;span class="n"&gt;CONFIG&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;foss&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These can be much more complex, including multiple hosts, but we&amp;#8217;ll keep it
simple.  Next we create spec/spec_helper_acceptance.rb.  We begin this file by
requiring beaker-rspec itself.  The next block checks to see if we&amp;#8217;ve passed in
certain environment options when running beaker (we&amp;#8217;ll talk more about these
later) and only runs the provisioning code if we didn&amp;#8217;t set&amp;nbsp;RS_PROVISON=no.&lt;/p&gt;
&lt;p&gt;Assuming we didn&amp;#8217;t set that, it then checks the nodeset that we pass to Beaker
to determine if it should install Puppet Enterprise or plain old&amp;nbsp;Puppet.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;beaker-rspec&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;RS_PROVISION&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;no&amp;#39;&lt;/span&gt;
  &lt;span class="n"&gt;hosts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="c1"&gt;# Install Puppet&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_pe?&lt;/span&gt;
      &lt;span class="n"&gt;install_pe&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;install_puppet&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next is some boilerplate RSpec.configure information.  We&amp;#8217;re creating a
proj_root variable that points to the module we&amp;#8217;re testing, as well as making
the rspec output a little prettier and easier to&amp;nbsp;read.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="c1"&gt;# Project root&lt;/span&gt;
  &lt;span class="n"&gt;proj_root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expand_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;__FILE__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;..&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="c1"&gt;# Readable test descriptions&lt;/span&gt;
  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;formatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:documentation&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This final block says &amp;#8220;before you run an actual test, do the following&amp;#8221;, which
then calls puppet_module_install() to install the current module into &amp;#8216;ssh&amp;#8217; on
the virtual machine, as well as runs two shell commands to create an empty
hiera.yaml and install stdlib.  Here we see :acceptable_exit_codes for the
first time, one of our primary ways of asserting the exit codes we&amp;#8217;ll accept
from&amp;nbsp;commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="ss"&gt;:suite&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;puppet_module_install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:source&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;proj_root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:module_name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ssh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;hosts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;

      &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/touch &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;puppetpath&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/hiera.yaml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;puppet module install puppetlabs-stdlib&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;:acceptable_exit_codes&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the basic helper and nodeset created we just need to make a few tests. We&amp;#8217;ll
put these in a file called spec/acceptance/class_spec.rb.  We include the file
we just created, spec_helper_acceptance, and then describe what we&amp;#8217;re&amp;nbsp;testing.&lt;/p&gt;
&lt;p&gt;First we create &lt;code&gt;pp&lt;/code&gt;, a variable to hold our manifest.  We use ruby&amp;#8217;s &lt;span class="caps"&gt;EOS&lt;/span&gt;
functionality to make sure we don&amp;#8217;t have to backslash a bunch of stuff and
can just cut and paste in manifests from&amp;nbsp;elsewhere.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;spec_helper_acceptance&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ssh class:&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;should run successfully&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;pp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class="no"&gt;EOS&lt;/span&gt;
&lt;span class="sh"&gt;    class { &amp;#39;ssh&amp;#39;: }&lt;/span&gt;
&lt;span class="no"&gt;    EOS&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we do the actual test.  apply_manifest() takes a manifest and various
options about what the outcome should be.  On our first run we&amp;#8217;re looking to
&amp;#8220;catch any failures&amp;#8221; and then on our second run we&amp;#8217;re looking to &amp;#8220;catch any
changes&amp;#8221;.  This allows us to be confident we&amp;#8217;re not changing the state of the
machine on multiple runs if everything is set correctly the first time.  We
have some other choices here, including :expect_failures and :expect_changes
for testing things we expect to fail, or&amp;nbsp;change.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="c1"&gt;# Apply twice to ensure no errors the second time.&lt;/span&gt;
    &lt;span class="n"&gt;apply_manifest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:catch_failures&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;apply_manifest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:catch_changes&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next we take advantage of our &lt;a href="http://serverspec.org/"&gt;ServerSpec&lt;/a&gt; integration
in order to check the service is running.  ServerSpec understands a whole bunch
of distributions and allows you to describe packages or services in an &lt;span class="caps"&gt;OS&lt;/span&gt;
independent way.  It&amp;#8217;ll understand that &lt;span class="caps"&gt;RHEL&lt;/span&gt; needs service x status and that
Windows needs something totally different.  It has a number of resources
documented on the website, we&amp;#8217;ll just use service&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;This is just an example to show you what serverspec has built in, for most
tests we just stick to &amp;#8216;be_running&amp;#8217; and&amp;nbsp;&amp;#8216;be_enabled&amp;#8217;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sshd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be_enabled&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with_level&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be_running&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be_monitored_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;monit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alternatively if we need to test something more complex we can rely on shell()
commands.  We run a monitoring script installed by the module, assert that it
must return a 0 exit code, and then give a regular expression to parse the
stdout of the script for to make sure we&amp;#8217;re happy with the state of&amp;nbsp;things.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;some command&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;runs a monitoring script&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/local/bin/monitoring_ssh_script.sh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:acceptable_exit_codes&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/SSH is alive and has \d+ users connected/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then putting all this together we just need to run a single command, if things
worked, to see the output of all these&amp;nbsp;tests.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;rspec&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;acceptance&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;Hypervisor&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;centos&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x64&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;vagrant&lt;/span&gt;
&lt;span class="n"&gt;Beaker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Hypervisor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt; &lt;span class="n"&gt;vagrant&lt;/span&gt; &lt;span class="n"&gt;boxes&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;
&lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="n"&gt;Vagrantfile&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;VagrantHost&lt;/span&gt; &lt;span class="n"&gt;centos&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x64&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bunch&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;deleted&lt;/span&gt; &lt;span class="n"&gt;stuff&lt;/span&gt; &lt;span class="n"&gt;about&lt;/span&gt; &lt;span class="n"&gt;bringing&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="n"&gt;machine&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt; &lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Finished&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;minutes&lt;/span&gt; &lt;span class="mf"&gt;15.2&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;examples&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;failures&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I hope this has helped explain a little bit of our acceptance testing framework
and made you realize it&amp;#8217;s pretty easy to integrate into your workflow.  Here
at Puppetlabs we mostly test with Vagrant/Virtualbox on our laptops as we
develop and then use Vsphere to test via Jenkins before we&amp;#8217;re ready to merge
a &lt;span class="caps"&gt;PR&lt;/span&gt; or release the updated module.  For real life examples of Beaker you can
look at many of the puppetlabs modules, such as apache, mysql, postgresql,
firewall, for examples of real world&amp;nbsp;testing.&lt;/p&gt;</summary></entry><entry><title>IntroducingÂ Puppet-a-day</title><link href="http://puppet-a-day.com/blog/2014/04/21/introducing-puppet-a-day/" rel="alternate"></link><updated>2014-04-21T00:00:00+00:00</updated><author><name>Daenney</name></author><id>tag:puppet-a-day.com,2014-04-21:blog/2014/04/21/introducing-puppet-a-day/</id><summary type="html">&lt;p&gt;Welcome to &amp;#8220;Puppet a day&amp;#8221;. The idea of this blog is to become a collection of
community crowdsourced content about Puppet. You can publish your own content
instead of needing to host a blog yourself, repost it here or simply link to
an article on another blog or&amp;nbsp;site.&lt;/p&gt;
&lt;p&gt;The blog is run as an opensource project and is hosted on Github. You can
fork the project, create a &lt;span class="caps"&gt;PR&lt;/span&gt; against the &lt;code&gt;source&lt;/code&gt; branch and if it passes
review it will get merged and&amp;nbsp;published.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;re by no means done working on this but it&amp;#8217;s &amp;#8220;good enough&amp;#8221; for release right
now. The theme is a heavily modified version of the Pure Pelican theme and
although better structured still messy in a bunch of places. There&amp;#8217;s no auto-
deploy yet either for when &lt;span class="caps"&gt;PR&lt;/span&gt;&amp;#8217;s get merged but we&amp;#8217;re working on adding&amp;nbsp;that.&lt;/p&gt;
&lt;p&gt;Looking forward to all your &lt;span class="caps"&gt;PR&lt;/span&gt;&amp;#8217;s!&lt;/p&gt;</summary></entry></feed>